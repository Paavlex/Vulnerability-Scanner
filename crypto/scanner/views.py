from django.shortcuts import render
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework.renderers import TemplateHTMLRenderer
from rest_framework.views import APIView
from .models import Device, Vulnerability
from .serializers import DeviceSerializer, VulnerabilitySerializer
from django.http import HttpResponse , JsonResponse
from django.shortcuts import redirect

import re
import json
import datetime
from .nmapScan import nmap_scan


# Create your views here.
def scan(request):
    '''defaultní stránka'''
    return render(request, 'index.html')

def database(request):
    '''dostává data z databáze, ty bud filtruje dle zadaného řetězce, nebo zobrazí všechna data v databázi'''
    
    if request.method == 'POST' :
        scan_id = request.POST['name']
        if scan_id != '':
            devices = Device.objects.filter(scan_id__icontains=scan_id)
        else:
            devices = Device.objects.all()
            
    if request.method == 'GET' :
       devices = Device.objects.all()
        
    vulnerabilities = Vulnerability.objects.all()
    serializer = VulnerabilitySerializer(vulnerabilities, many=True)
    
    
    dev_serializer = DeviceSerializer(devices, many=True)
    
    vuln_dict = {"vulns": serializer.data, "devices": dev_serializer.data}
    
    
    return render(request, 'content.html', vuln_dict)

def data_processing(request):
    '''Zpracovávání dat vrácených ze skeneru'''
    if request.method =='POST':
        # podmínka pro zabránění použití scan_id dvakrát
        if Device.objects.filter(scan_id=request.POST['name']).exists():
            return render(request, 'Database.html')
        else:
            # deklarace proměnných
            time_stamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            scan_id = request.POST['name']
            ip_address = request.POST['ip_address']
            device_id = 1
            device_type = "-"
            firmware = "-"
            ports = ""
            
            ref_link = "https://cve.mitre.org/cgi-bin/cvename.cgi?name="
            vulns = {}
            name_vuln = '-'
            type_vuln = '-'
            cvss = '-'
            link = '-'
            
            name = scan_id
            
            
            # volání funckce pro spuštění nmap
            returned_dictionary = nmap_scan(ip_address)
            # print(returned_dictionary)
            
            # for each pro zpracování více zařízení
            for ip_device in returned_dictionary.keys():
                ports = ""
                if ip_device == "stats":
                    break
                
                # kontrola a případně oštření , pokud data neexistují
                try:
                    array_of_ports = returned_dictionary[ip_device]["ports"]
                except KeyError:
                    continue
                    #return render(request, "Database.html")
                     
                try:
                    firmware = returned_dictionary[ip_device]["osmatch"][0]["name"]
                    device_type = returned_dictionary[ip_device]["osmatch"][0]["osclass"]["type"]
                except IndexError:
                    firmware = "-"
                    device_type = "-"
            
                # získání dat z dictionary
                for port in array_of_ports:
                    if port["state"] == "open":
                        ports = ports + port["portid"] + ";"
                    scripts = port["scripts"]
                    counter = 0
                    for tmp in port["scripts"]:
                        print("vulns",tmp)
                        print("counter: ",counter)
                        if counter == 0:
                            if tmp["name"] == "fingerprint-strings":
                                continue
                            vulns=tmp
                            for vuln in vulns["data"].keys():
                                print(vuln)
                                for child in vulns["data"][vuln]["children"]:
                                    
                                    cve = ""
                                    cve = re.search("CVE.*\/?$", child["id"])
                                    
                                    if cve is not None:
                                        link = ref_link + cve.group(0)
                                    
                                    if cve == None:
                                        link = "-"    
                                    
                                    
                                    print(child)
                                    name_vuln = child["id"]
                                    type_vuln = child["type"]
                                    cvss = child["cvss"]
                                    
                                
                                    print(name," ",type_vuln," ",cvss," ",link)
                                    
                                    # Vulnerable port info
                                    tmp_dict = {"scan_id":str(scan_id), "device_id":str(device_id), "name":str(name_vuln), "type":str(type_vuln), "cvss":str(cvss), "link":str(link)}
                                    serializer = VulnerabilitySerializer(data=tmp_dict)
                                    
                                    if serializer.is_valid():
                                        serializer.save()
                                        
                                    
                                    name_vuln = '-'
                                    type_vuln = '-'
                                    cvss = '-'
                                    link = '-'
                                
                        counter = counter+1      
                
                # Device info
                if ports == "":
                    ports = "-"
                tmp_dev_dict = {"time_stamp": time_stamp, "scan_id":str(scan_id), "ip_address":str(ip_device), "device_id":str(device_id), "device_type":str(device_type), "firmware":str(firmware), "open_ports":str(ports)}  
                dev_serializer = DeviceSerializer(data=tmp_dev_dict) 
                
                if dev_serializer.is_valid():
                    dev_serializer.save()
                print(ports)
                device_id = device_id+1
                
            
                
            response = redirect('/database/')
            return response

    
    




    

